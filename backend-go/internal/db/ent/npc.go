// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agentic-npc-backend/internal/db/ent/npc"
	"agentic-npc-backend/internal/db/ent/schema"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// NPC is the model entity for the NPC schema.
type NPC struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NpcType holds the value of the "npc_type" field.
	NpcType string `json:"npc_type,omitempty"`
	// Emotions holds the value of the "emotions" field.
	Emotions *schema.EmotionState `json:"emotions,omitempty"`
	// CurrentGoals holds the value of the "current_goals" field.
	CurrentGoals []string `json:"current_goals,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NPCQuery when eager-loading is set.
	Edges        NPCEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NPCEdges holds the relations/edges for other nodes in the graph.
type NPCEdges struct {
	// Memories holds the value of the memories edge.
	Memories []*Memory `json:"memories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MemoriesOrErr returns the Memories value or an error if the edge
// was not loaded in eager-loading.
func (e NPCEdges) MemoriesOrErr() ([]*Memory, error) {
	if e.loadedTypes[0] {
		return e.Memories, nil
	}
	return nil, &NotLoadedError{edge: "memories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NPC) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case npc.FieldEmotions, npc.FieldCurrentGoals:
			values[i] = new([]byte)
		case npc.FieldName, npc.FieldNpcType:
			values[i] = new(sql.NullString)
		case npc.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NPC fields.
func (_m *NPC) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case npc.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case npc.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case npc.FieldNpcType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field npc_type", values[i])
			} else if value.Valid {
				_m.NpcType = value.String
			}
		case npc.FieldEmotions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field emotions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Emotions); err != nil {
					return fmt.Errorf("unmarshal field emotions: %w", err)
				}
			}
		case npc.FieldCurrentGoals:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field current_goals", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.CurrentGoals); err != nil {
					return fmt.Errorf("unmarshal field current_goals: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NPC.
// This includes values selected through modifiers, order, etc.
func (_m *NPC) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryMemories queries the "memories" edge of the NPC entity.
func (_m *NPC) QueryMemories() *MemoryQuery {
	return NewNPCClient(_m.config).QueryMemories(_m)
}

// Update returns a builder for updating this NPC.
// Note that you need to call NPC.Unwrap() before calling this method if this NPC
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *NPC) Update() *NPCUpdateOne {
	return NewNPCClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the NPC entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *NPC) Unwrap() *NPC {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: NPC is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *NPC) String() string {
	var builder strings.Builder
	builder.WriteString("NPC(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("npc_type=")
	builder.WriteString(_m.NpcType)
	builder.WriteString(", ")
	builder.WriteString("emotions=")
	builder.WriteString(fmt.Sprintf("%v", _m.Emotions))
	builder.WriteString(", ")
	builder.WriteString("current_goals=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentGoals))
	builder.WriteByte(')')
	return builder.String()
}

// NPCs is a parsable slice of NPC.
type NPCs []*NPC
