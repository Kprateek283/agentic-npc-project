// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agentic-npc-backend/internal/db/ent/memory"
	"agentic-npc-backend/internal/db/ent/npc"
	"agentic-npc-backend/internal/db/ent/predicate"
	"agentic-npc-backend/internal/db/ent/schema"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMemory = "Memory"
	TypeNPC    = "NPC"
)

// MemoryMutation represents an operation that mutates the Memory nodes in the graph.
type MemoryMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	description        *string
	event_type         *string
	participants       *[]string
	appendparticipants []string
	importance         *float64
	addimportance      *float64
	clearedFields      map[string]struct{}
	owner              *uuid.UUID
	clearedowner       bool
	done               bool
	oldValue           func(context.Context) (*Memory, error)
	predicates         []predicate.Memory
}

var _ ent.Mutation = (*MemoryMutation)(nil)

// memoryOption allows management of the mutation configuration using functional options.
type memoryOption func(*MemoryMutation)

// newMemoryMutation creates new mutation for the Memory entity.
func newMemoryMutation(c config, op Op, opts ...memoryOption) *MemoryMutation {
	m := &MemoryMutation{
		config:        c,
		op:            op,
		typ:           TypeMemory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemoryID sets the ID field of the mutation.
func withMemoryID(id int) memoryOption {
	return func(m *MemoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Memory
		)
		m.oldValue = func(ctx context.Context) (*Memory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Memory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemory sets the old Memory of the mutation.
func withMemory(node *Memory) memoryOption {
	return func(m *MemoryMutation) {
		m.oldValue = func(context.Context) (*Memory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Memory entities.
func (m *MemoryMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Memory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MemoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MemoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Memory entity.
// If the Memory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MemoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDescription sets the "description" field.
func (m *MemoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MemoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Memory entity.
// If the Memory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MemoryMutation) ResetDescription() {
	m.description = nil
}

// SetEventType sets the "event_type" field.
func (m *MemoryMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *MemoryMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the Memory entity.
// If the Memory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoryMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "event_type" field.
func (m *MemoryMutation) ResetEventType() {
	m.event_type = nil
}

// SetParticipants sets the "participants" field.
func (m *MemoryMutation) SetParticipants(s []string) {
	m.participants = &s
	m.appendparticipants = nil
}

// Participants returns the value of the "participants" field in the mutation.
func (m *MemoryMutation) Participants() (r []string, exists bool) {
	v := m.participants
	if v == nil {
		return
	}
	return *v, true
}

// OldParticipants returns the old "participants" field's value of the Memory entity.
// If the Memory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoryMutation) OldParticipants(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParticipants is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParticipants requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParticipants: %w", err)
	}
	return oldValue.Participants, nil
}

// AppendParticipants adds s to the "participants" field.
func (m *MemoryMutation) AppendParticipants(s []string) {
	m.appendparticipants = append(m.appendparticipants, s...)
}

// AppendedParticipants returns the list of values that were appended to the "participants" field in this mutation.
func (m *MemoryMutation) AppendedParticipants() ([]string, bool) {
	if len(m.appendparticipants) == 0 {
		return nil, false
	}
	return m.appendparticipants, true
}

// ResetParticipants resets all changes to the "participants" field.
func (m *MemoryMutation) ResetParticipants() {
	m.participants = nil
	m.appendparticipants = nil
}

// SetImportance sets the "importance" field.
func (m *MemoryMutation) SetImportance(f float64) {
	m.importance = &f
	m.addimportance = nil
}

// Importance returns the value of the "importance" field in the mutation.
func (m *MemoryMutation) Importance() (r float64, exists bool) {
	v := m.importance
	if v == nil {
		return
	}
	return *v, true
}

// OldImportance returns the old "importance" field's value of the Memory entity.
// If the Memory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoryMutation) OldImportance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImportance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImportance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImportance: %w", err)
	}
	return oldValue.Importance, nil
}

// AddImportance adds f to the "importance" field.
func (m *MemoryMutation) AddImportance(f float64) {
	if m.addimportance != nil {
		*m.addimportance += f
	} else {
		m.addimportance = &f
	}
}

// AddedImportance returns the value that was added to the "importance" field in this mutation.
func (m *MemoryMutation) AddedImportance() (r float64, exists bool) {
	v := m.addimportance
	if v == nil {
		return
	}
	return *v, true
}

// ResetImportance resets all changes to the "importance" field.
func (m *MemoryMutation) ResetImportance() {
	m.importance = nil
	m.addimportance = nil
}

// SetOwnerID sets the "owner" edge to the NPC entity by id.
func (m *MemoryMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the NPC entity.
func (m *MemoryMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the NPC entity was cleared.
func (m *MemoryMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *MemoryMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *MemoryMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *MemoryMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the MemoryMutation builder.
func (m *MemoryMutation) Where(ps ...predicate.Memory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Memory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Memory).
func (m *MemoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemoryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, memory.FieldCreatedAt)
	}
	if m.description != nil {
		fields = append(fields, memory.FieldDescription)
	}
	if m.event_type != nil {
		fields = append(fields, memory.FieldEventType)
	}
	if m.participants != nil {
		fields = append(fields, memory.FieldParticipants)
	}
	if m.importance != nil {
		fields = append(fields, memory.FieldImportance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memory.FieldCreatedAt:
		return m.CreatedAt()
	case memory.FieldDescription:
		return m.Description()
	case memory.FieldEventType:
		return m.EventType()
	case memory.FieldParticipants:
		return m.Participants()
	case memory.FieldImportance:
		return m.Importance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case memory.FieldDescription:
		return m.OldDescription(ctx)
	case memory.FieldEventType:
		return m.OldEventType(ctx)
	case memory.FieldParticipants:
		return m.OldParticipants(ctx)
	case memory.FieldImportance:
		return m.OldImportance(ctx)
	}
	return nil, fmt.Errorf("unknown Memory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case memory.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case memory.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case memory.FieldParticipants:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParticipants(v)
		return nil
	case memory.FieldImportance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImportance(v)
		return nil
	}
	return fmt.Errorf("unknown Memory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemoryMutation) AddedFields() []string {
	var fields []string
	if m.addimportance != nil {
		fields = append(fields, memory.FieldImportance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case memory.FieldImportance:
		return m.AddedImportance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case memory.FieldImportance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddImportance(v)
		return nil
	}
	return fmt.Errorf("unknown Memory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Memory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemoryMutation) ResetField(name string) error {
	switch name {
	case memory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case memory.FieldDescription:
		m.ResetDescription()
		return nil
	case memory.FieldEventType:
		m.ResetEventType()
		return nil
	case memory.FieldParticipants:
		m.ResetParticipants()
		return nil
	case memory.FieldImportance:
		m.ResetImportance()
		return nil
	}
	return fmt.Errorf("unknown Memory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, memory.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memory.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, memory.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemoryMutation) EdgeCleared(name string) bool {
	switch name {
	case memory.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemoryMutation) ClearEdge(name string) error {
	switch name {
	case memory.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Memory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemoryMutation) ResetEdge(name string) error {
	switch name {
	case memory.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Memory edge %s", name)
}

// NPCMutation represents an operation that mutates the NPC nodes in the graph.
type NPCMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	npc_type            *string
	emotions            **schema.EmotionState
	current_goals       *[]string
	appendcurrent_goals []string
	clearedFields       map[string]struct{}
	memories            map[int]struct{}
	removedmemories     map[int]struct{}
	clearedmemories     bool
	done                bool
	oldValue            func(context.Context) (*NPC, error)
	predicates          []predicate.NPC
}

var _ ent.Mutation = (*NPCMutation)(nil)

// npcOption allows management of the mutation configuration using functional options.
type npcOption func(*NPCMutation)

// newNPCMutation creates new mutation for the NPC entity.
func newNPCMutation(c config, op Op, opts ...npcOption) *NPCMutation {
	m := &NPCMutation{
		config:        c,
		op:            op,
		typ:           TypeNPC,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNPCID sets the ID field of the mutation.
func withNPCID(id uuid.UUID) npcOption {
	return func(m *NPCMutation) {
		var (
			err   error
			once  sync.Once
			value *NPC
		)
		m.oldValue = func(ctx context.Context) (*NPC, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NPC.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNPC sets the old NPC of the mutation.
func withNPC(node *NPC) npcOption {
	return func(m *NPCMutation) {
		m.oldValue = func(context.Context) (*NPC, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NPCMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NPCMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NPC entities.
func (m *NPCMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NPCMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NPCMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NPC.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *NPCMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NPCMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NPC entity.
// If the NPC object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NPCMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NPCMutation) ResetName() {
	m.name = nil
}

// SetNpcType sets the "npc_type" field.
func (m *NPCMutation) SetNpcType(s string) {
	m.npc_type = &s
}

// NpcType returns the value of the "npc_type" field in the mutation.
func (m *NPCMutation) NpcType() (r string, exists bool) {
	v := m.npc_type
	if v == nil {
		return
	}
	return *v, true
}

// OldNpcType returns the old "npc_type" field's value of the NPC entity.
// If the NPC object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NPCMutation) OldNpcType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNpcType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNpcType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNpcType: %w", err)
	}
	return oldValue.NpcType, nil
}

// ResetNpcType resets all changes to the "npc_type" field.
func (m *NPCMutation) ResetNpcType() {
	m.npc_type = nil
}

// SetEmotions sets the "emotions" field.
func (m *NPCMutation) SetEmotions(ss *schema.EmotionState) {
	m.emotions = &ss
}

// Emotions returns the value of the "emotions" field in the mutation.
func (m *NPCMutation) Emotions() (r *schema.EmotionState, exists bool) {
	v := m.emotions
	if v == nil {
		return
	}
	return *v, true
}

// OldEmotions returns the old "emotions" field's value of the NPC entity.
// If the NPC object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NPCMutation) OldEmotions(ctx context.Context) (v *schema.EmotionState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmotions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmotions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmotions: %w", err)
	}
	return oldValue.Emotions, nil
}

// ResetEmotions resets all changes to the "emotions" field.
func (m *NPCMutation) ResetEmotions() {
	m.emotions = nil
}

// SetCurrentGoals sets the "current_goals" field.
func (m *NPCMutation) SetCurrentGoals(s []string) {
	m.current_goals = &s
	m.appendcurrent_goals = nil
}

// CurrentGoals returns the value of the "current_goals" field in the mutation.
func (m *NPCMutation) CurrentGoals() (r []string, exists bool) {
	v := m.current_goals
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentGoals returns the old "current_goals" field's value of the NPC entity.
// If the NPC object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NPCMutation) OldCurrentGoals(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentGoals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentGoals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentGoals: %w", err)
	}
	return oldValue.CurrentGoals, nil
}

// AppendCurrentGoals adds s to the "current_goals" field.
func (m *NPCMutation) AppendCurrentGoals(s []string) {
	m.appendcurrent_goals = append(m.appendcurrent_goals, s...)
}

// AppendedCurrentGoals returns the list of values that were appended to the "current_goals" field in this mutation.
func (m *NPCMutation) AppendedCurrentGoals() ([]string, bool) {
	if len(m.appendcurrent_goals) == 0 {
		return nil, false
	}
	return m.appendcurrent_goals, true
}

// ClearCurrentGoals clears the value of the "current_goals" field.
func (m *NPCMutation) ClearCurrentGoals() {
	m.current_goals = nil
	m.appendcurrent_goals = nil
	m.clearedFields[npc.FieldCurrentGoals] = struct{}{}
}

// CurrentGoalsCleared returns if the "current_goals" field was cleared in this mutation.
func (m *NPCMutation) CurrentGoalsCleared() bool {
	_, ok := m.clearedFields[npc.FieldCurrentGoals]
	return ok
}

// ResetCurrentGoals resets all changes to the "current_goals" field.
func (m *NPCMutation) ResetCurrentGoals() {
	m.current_goals = nil
	m.appendcurrent_goals = nil
	delete(m.clearedFields, npc.FieldCurrentGoals)
}

// AddMemoryIDs adds the "memories" edge to the Memory entity by ids.
func (m *NPCMutation) AddMemoryIDs(ids ...int) {
	if m.memories == nil {
		m.memories = make(map[int]struct{})
	}
	for i := range ids {
		m.memories[ids[i]] = struct{}{}
	}
}

// ClearMemories clears the "memories" edge to the Memory entity.
func (m *NPCMutation) ClearMemories() {
	m.clearedmemories = true
}

// MemoriesCleared reports if the "memories" edge to the Memory entity was cleared.
func (m *NPCMutation) MemoriesCleared() bool {
	return m.clearedmemories
}

// RemoveMemoryIDs removes the "memories" edge to the Memory entity by IDs.
func (m *NPCMutation) RemoveMemoryIDs(ids ...int) {
	if m.removedmemories == nil {
		m.removedmemories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.memories, ids[i])
		m.removedmemories[ids[i]] = struct{}{}
	}
}

// RemovedMemories returns the removed IDs of the "memories" edge to the Memory entity.
func (m *NPCMutation) RemovedMemoriesIDs() (ids []int) {
	for id := range m.removedmemories {
		ids = append(ids, id)
	}
	return
}

// MemoriesIDs returns the "memories" edge IDs in the mutation.
func (m *NPCMutation) MemoriesIDs() (ids []int) {
	for id := range m.memories {
		ids = append(ids, id)
	}
	return
}

// ResetMemories resets all changes to the "memories" edge.
func (m *NPCMutation) ResetMemories() {
	m.memories = nil
	m.clearedmemories = false
	m.removedmemories = nil
}

// Where appends a list predicates to the NPCMutation builder.
func (m *NPCMutation) Where(ps ...predicate.NPC) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NPCMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NPCMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NPC, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NPCMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NPCMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NPC).
func (m *NPCMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NPCMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, npc.FieldName)
	}
	if m.npc_type != nil {
		fields = append(fields, npc.FieldNpcType)
	}
	if m.emotions != nil {
		fields = append(fields, npc.FieldEmotions)
	}
	if m.current_goals != nil {
		fields = append(fields, npc.FieldCurrentGoals)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NPCMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case npc.FieldName:
		return m.Name()
	case npc.FieldNpcType:
		return m.NpcType()
	case npc.FieldEmotions:
		return m.Emotions()
	case npc.FieldCurrentGoals:
		return m.CurrentGoals()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NPCMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case npc.FieldName:
		return m.OldName(ctx)
	case npc.FieldNpcType:
		return m.OldNpcType(ctx)
	case npc.FieldEmotions:
		return m.OldEmotions(ctx)
	case npc.FieldCurrentGoals:
		return m.OldCurrentGoals(ctx)
	}
	return nil, fmt.Errorf("unknown NPC field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NPCMutation) SetField(name string, value ent.Value) error {
	switch name {
	case npc.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case npc.FieldNpcType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNpcType(v)
		return nil
	case npc.FieldEmotions:
		v, ok := value.(*schema.EmotionState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmotions(v)
		return nil
	case npc.FieldCurrentGoals:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentGoals(v)
		return nil
	}
	return fmt.Errorf("unknown NPC field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NPCMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NPCMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NPCMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NPC numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NPCMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(npc.FieldCurrentGoals) {
		fields = append(fields, npc.FieldCurrentGoals)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NPCMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NPCMutation) ClearField(name string) error {
	switch name {
	case npc.FieldCurrentGoals:
		m.ClearCurrentGoals()
		return nil
	}
	return fmt.Errorf("unknown NPC nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NPCMutation) ResetField(name string) error {
	switch name {
	case npc.FieldName:
		m.ResetName()
		return nil
	case npc.FieldNpcType:
		m.ResetNpcType()
		return nil
	case npc.FieldEmotions:
		m.ResetEmotions()
		return nil
	case npc.FieldCurrentGoals:
		m.ResetCurrentGoals()
		return nil
	}
	return fmt.Errorf("unknown NPC field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NPCMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.memories != nil {
		edges = append(edges, npc.EdgeMemories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NPCMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case npc.EdgeMemories:
		ids := make([]ent.Value, 0, len(m.memories))
		for id := range m.memories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NPCMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmemories != nil {
		edges = append(edges, npc.EdgeMemories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NPCMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case npc.EdgeMemories:
		ids := make([]ent.Value, 0, len(m.removedmemories))
		for id := range m.removedmemories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NPCMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmemories {
		edges = append(edges, npc.EdgeMemories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NPCMutation) EdgeCleared(name string) bool {
	switch name {
	case npc.EdgeMemories:
		return m.clearedmemories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NPCMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown NPC unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NPCMutation) ResetEdge(name string) error {
	switch name {
	case npc.EdgeMemories:
		m.ResetMemories()
		return nil
	}
	return fmt.Errorf("unknown NPC edge %s", name)
}
