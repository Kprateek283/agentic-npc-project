// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agentic-npc-backend/internal/db/ent/memory"
	"agentic-npc-backend/internal/db/ent/npc"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Memory is the model entity for the Memory schema.
type Memory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// Participants holds the value of the "participants" field.
	Participants []string `json:"participants,omitempty"`
	// Importance holds the value of the "importance" field.
	Importance float64 `json:"importance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemoryQuery when eager-loading is set.
	Edges        MemoryEdges `json:"edges"`
	npc_memories *uuid.UUID
	selectValues sql.SelectValues
}

// MemoryEdges holds the relations/edges for other nodes in the graph.
type MemoryEdges struct {
	// Owner holds the value of the owner edge.
	Owner *NPC `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemoryEdges) OwnerOrErr() (*NPC, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: npc.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Memory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memory.FieldParticipants:
			values[i] = new([]byte)
		case memory.FieldImportance:
			values[i] = new(sql.NullFloat64)
		case memory.FieldID:
			values[i] = new(sql.NullInt64)
		case memory.FieldDescription, memory.FieldEventType:
			values[i] = new(sql.NullString)
		case memory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case memory.ForeignKeys[0]: // npc_memories
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Memory fields.
func (_m *Memory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case memory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case memory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case memory.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = value.String
			}
		case memory.FieldParticipants:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field participants", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Participants); err != nil {
					return fmt.Errorf("unmarshal field participants: %w", err)
				}
			}
		case memory.FieldImportance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field importance", values[i])
			} else if value.Valid {
				_m.Importance = value.Float64
			}
		case memory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field npc_memories", values[i])
			} else if value.Valid {
				_m.npc_memories = new(uuid.UUID)
				*_m.npc_memories = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Memory.
// This includes values selected through modifiers, order, etc.
func (_m *Memory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Memory entity.
func (_m *Memory) QueryOwner() *NPCQuery {
	return NewMemoryClient(_m.config).QueryOwner(_m)
}

// Update returns a builder for updating this Memory.
// Note that you need to call Memory.Unwrap() before calling this method if this Memory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Memory) Update() *MemoryUpdateOne {
	return NewMemoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Memory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Memory) Unwrap() *Memory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Memory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Memory) String() string {
	var builder strings.Builder
	builder.WriteString("Memory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(_m.EventType)
	builder.WriteString(", ")
	builder.WriteString("participants=")
	builder.WriteString(fmt.Sprintf("%v", _m.Participants))
	builder.WriteString(", ")
	builder.WriteString("importance=")
	builder.WriteString(fmt.Sprintf("%v", _m.Importance))
	builder.WriteByte(')')
	return builder.String()
}

// Memories is a parsable slice of Memory.
type Memories []*Memory
