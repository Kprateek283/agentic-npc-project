// Code generated by ent, DO NOT EDIT.

package npc

import (
	"agentic-npc-backend/internal/db/ent/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the npc type in the database.
	Label = "npc"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNpcType holds the string denoting the npc_type field in the database.
	FieldNpcType = "npc_type"
	// FieldEmotions holds the string denoting the emotions field in the database.
	FieldEmotions = "emotions"
	// FieldCurrentGoals holds the string denoting the current_goals field in the database.
	FieldCurrentGoals = "current_goals"
	// EdgeMemories holds the string denoting the memories edge name in mutations.
	EdgeMemories = "memories"
	// Table holds the table name of the npc in the database.
	Table = "np_cs"
	// MemoriesTable is the table that holds the memories relation/edge.
	MemoriesTable = "memories"
	// MemoriesInverseTable is the table name for the Memory entity.
	// It exists in this package in order to avoid circular dependency with the "memory" package.
	MemoriesInverseTable = "memories"
	// MemoriesColumn is the table column denoting the memories relation/edge.
	MemoriesColumn = "npc_memories"
)

// Columns holds all SQL columns for npc fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNpcType,
	FieldEmotions,
	FieldCurrentGoals,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultNpcType holds the default value on creation for the "npc_type" field.
	DefaultNpcType string
	// DefaultEmotions holds the default value on creation for the "emotions" field.
	DefaultEmotions *schema.EmotionState
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the NPC queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNpcType orders the results by the npc_type field.
func ByNpcType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNpcType, opts...).ToFunc()
}

// ByMemoriesCount orders the results by memories count.
func ByMemoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemoriesStep(), opts...)
	}
}

// ByMemories orders the results by memories terms.
func ByMemories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemoriesTable, MemoriesColumn),
	)
}
