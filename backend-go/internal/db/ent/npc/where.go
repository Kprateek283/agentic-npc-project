// Code generated by ent, DO NOT EDIT.

package npc

import (
	"agentic-npc-backend/internal/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.NPC {
	return predicate.NPC(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NPC {
	return predicate.NPC(sql.FieldEQ(FieldName, v))
}

// NpcType applies equality check predicate on the "npc_type" field. It's identical to NpcTypeEQ.
func NpcType(v string) predicate.NPC {
	return predicate.NPC(sql.FieldEQ(FieldNpcType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NPC {
	return predicate.NPC(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NPC {
	return predicate.NPC(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NPC {
	return predicate.NPC(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NPC {
	return predicate.NPC(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NPC {
	return predicate.NPC(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NPC {
	return predicate.NPC(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NPC {
	return predicate.NPC(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NPC {
	return predicate.NPC(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NPC {
	return predicate.NPC(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NPC {
	return predicate.NPC(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NPC {
	return predicate.NPC(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NPC {
	return predicate.NPC(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NPC {
	return predicate.NPC(sql.FieldContainsFold(FieldName, v))
}

// NpcTypeEQ applies the EQ predicate on the "npc_type" field.
func NpcTypeEQ(v string) predicate.NPC {
	return predicate.NPC(sql.FieldEQ(FieldNpcType, v))
}

// NpcTypeNEQ applies the NEQ predicate on the "npc_type" field.
func NpcTypeNEQ(v string) predicate.NPC {
	return predicate.NPC(sql.FieldNEQ(FieldNpcType, v))
}

// NpcTypeIn applies the In predicate on the "npc_type" field.
func NpcTypeIn(vs ...string) predicate.NPC {
	return predicate.NPC(sql.FieldIn(FieldNpcType, vs...))
}

// NpcTypeNotIn applies the NotIn predicate on the "npc_type" field.
func NpcTypeNotIn(vs ...string) predicate.NPC {
	return predicate.NPC(sql.FieldNotIn(FieldNpcType, vs...))
}

// NpcTypeGT applies the GT predicate on the "npc_type" field.
func NpcTypeGT(v string) predicate.NPC {
	return predicate.NPC(sql.FieldGT(FieldNpcType, v))
}

// NpcTypeGTE applies the GTE predicate on the "npc_type" field.
func NpcTypeGTE(v string) predicate.NPC {
	return predicate.NPC(sql.FieldGTE(FieldNpcType, v))
}

// NpcTypeLT applies the LT predicate on the "npc_type" field.
func NpcTypeLT(v string) predicate.NPC {
	return predicate.NPC(sql.FieldLT(FieldNpcType, v))
}

// NpcTypeLTE applies the LTE predicate on the "npc_type" field.
func NpcTypeLTE(v string) predicate.NPC {
	return predicate.NPC(sql.FieldLTE(FieldNpcType, v))
}

// NpcTypeContains applies the Contains predicate on the "npc_type" field.
func NpcTypeContains(v string) predicate.NPC {
	return predicate.NPC(sql.FieldContains(FieldNpcType, v))
}

// NpcTypeHasPrefix applies the HasPrefix predicate on the "npc_type" field.
func NpcTypeHasPrefix(v string) predicate.NPC {
	return predicate.NPC(sql.FieldHasPrefix(FieldNpcType, v))
}

// NpcTypeHasSuffix applies the HasSuffix predicate on the "npc_type" field.
func NpcTypeHasSuffix(v string) predicate.NPC {
	return predicate.NPC(sql.FieldHasSuffix(FieldNpcType, v))
}

// NpcTypeEqualFold applies the EqualFold predicate on the "npc_type" field.
func NpcTypeEqualFold(v string) predicate.NPC {
	return predicate.NPC(sql.FieldEqualFold(FieldNpcType, v))
}

// NpcTypeContainsFold applies the ContainsFold predicate on the "npc_type" field.
func NpcTypeContainsFold(v string) predicate.NPC {
	return predicate.NPC(sql.FieldContainsFold(FieldNpcType, v))
}

// CurrentGoalsIsNil applies the IsNil predicate on the "current_goals" field.
func CurrentGoalsIsNil() predicate.NPC {
	return predicate.NPC(sql.FieldIsNull(FieldCurrentGoals))
}

// CurrentGoalsNotNil applies the NotNil predicate on the "current_goals" field.
func CurrentGoalsNotNil() predicate.NPC {
	return predicate.NPC(sql.FieldNotNull(FieldCurrentGoals))
}

// HasMemories applies the HasEdge predicate on the "memories" edge.
func HasMemories() predicate.NPC {
	return predicate.NPC(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemoriesTable, MemoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemoriesWith applies the HasEdge predicate on the "memories" edge with a given conditions (other predicates).
func HasMemoriesWith(preds ...predicate.Memory) predicate.NPC {
	return predicate.NPC(func(s *sql.Selector) {
		step := newMemoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NPC) predicate.NPC {
	return predicate.NPC(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NPC) predicate.NPC {
	return predicate.NPC(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NPC) predicate.NPC {
	return predicate.NPC(sql.NotPredicates(p))
}
