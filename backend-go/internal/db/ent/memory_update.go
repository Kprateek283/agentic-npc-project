// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agentic-npc-backend/internal/db/ent/memory"
	"agentic-npc-backend/internal/db/ent/npc"
	"agentic-npc-backend/internal/db/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MemoryUpdate is the builder for updating Memory entities.
type MemoryUpdate struct {
	config
	hooks    []Hook
	mutation *MemoryMutation
}

// Where appends a list predicates to the MemoryUpdate builder.
func (_u *MemoryUpdate) Where(ps ...predicate.Memory) *MemoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *MemoryUpdate) SetCreatedAt(v time.Time) *MemoryUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *MemoryUpdate) SetNillableCreatedAt(v *time.Time) *MemoryUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *MemoryUpdate) SetDescription(v string) *MemoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *MemoryUpdate) SetNillableDescription(v *string) *MemoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *MemoryUpdate) SetEventType(v string) *MemoryUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *MemoryUpdate) SetNillableEventType(v *string) *MemoryUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetParticipants sets the "participants" field.
func (_u *MemoryUpdate) SetParticipants(v []string) *MemoryUpdate {
	_u.mutation.SetParticipants(v)
	return _u
}

// AppendParticipants appends value to the "participants" field.
func (_u *MemoryUpdate) AppendParticipants(v []string) *MemoryUpdate {
	_u.mutation.AppendParticipants(v)
	return _u
}

// SetImportance sets the "importance" field.
func (_u *MemoryUpdate) SetImportance(v float64) *MemoryUpdate {
	_u.mutation.ResetImportance()
	_u.mutation.SetImportance(v)
	return _u
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_u *MemoryUpdate) SetNillableImportance(v *float64) *MemoryUpdate {
	if v != nil {
		_u.SetImportance(*v)
	}
	return _u
}

// AddImportance adds value to the "importance" field.
func (_u *MemoryUpdate) AddImportance(v float64) *MemoryUpdate {
	_u.mutation.AddImportance(v)
	return _u
}

// SetOwnerID sets the "owner" edge to the NPC entity by ID.
func (_u *MemoryUpdate) SetOwnerID(id uuid.UUID) *MemoryUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the NPC entity.
func (_u *MemoryUpdate) SetOwner(v *NPC) *MemoryUpdate {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the MemoryMutation object of the builder.
func (_u *MemoryUpdate) Mutation() *MemoryMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the NPC entity.
func (_u *MemoryUpdate) ClearOwner() *MemoryUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MemoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MemoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MemoryUpdate) check() error {
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Memory.owner"`)
	}
	return nil
}

func (_u *MemoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memory.Table, memory.Columns, sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(memory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(memory.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(memory.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Participants(); ok {
		_spec.SetField(memory.FieldParticipants, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedParticipants(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, memory.FieldParticipants, value)
		})
	}
	if value, ok := _u.mutation.Importance(); ok {
		_spec.SetField(memory.FieldImportance, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedImportance(); ok {
		_spec.AddField(memory.FieldImportance, field.TypeFloat64, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.OwnerTable,
			Columns: []string{memory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(npc.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.OwnerTable,
			Columns: []string{memory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(npc.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MemoryUpdateOne is the builder for updating a single Memory entity.
type MemoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemoryMutation
}

// SetCreatedAt sets the "created_at" field.
func (_u *MemoryUpdateOne) SetCreatedAt(v time.Time) *MemoryUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *MemoryUpdateOne) SetNillableCreatedAt(v *time.Time) *MemoryUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *MemoryUpdateOne) SetDescription(v string) *MemoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *MemoryUpdateOne) SetNillableDescription(v *string) *MemoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *MemoryUpdateOne) SetEventType(v string) *MemoryUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *MemoryUpdateOne) SetNillableEventType(v *string) *MemoryUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetParticipants sets the "participants" field.
func (_u *MemoryUpdateOne) SetParticipants(v []string) *MemoryUpdateOne {
	_u.mutation.SetParticipants(v)
	return _u
}

// AppendParticipants appends value to the "participants" field.
func (_u *MemoryUpdateOne) AppendParticipants(v []string) *MemoryUpdateOne {
	_u.mutation.AppendParticipants(v)
	return _u
}

// SetImportance sets the "importance" field.
func (_u *MemoryUpdateOne) SetImportance(v float64) *MemoryUpdateOne {
	_u.mutation.ResetImportance()
	_u.mutation.SetImportance(v)
	return _u
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_u *MemoryUpdateOne) SetNillableImportance(v *float64) *MemoryUpdateOne {
	if v != nil {
		_u.SetImportance(*v)
	}
	return _u
}

// AddImportance adds value to the "importance" field.
func (_u *MemoryUpdateOne) AddImportance(v float64) *MemoryUpdateOne {
	_u.mutation.AddImportance(v)
	return _u
}

// SetOwnerID sets the "owner" edge to the NPC entity by ID.
func (_u *MemoryUpdateOne) SetOwnerID(id uuid.UUID) *MemoryUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the NPC entity.
func (_u *MemoryUpdateOne) SetOwner(v *NPC) *MemoryUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the MemoryMutation object of the builder.
func (_u *MemoryUpdateOne) Mutation() *MemoryMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the NPC entity.
func (_u *MemoryUpdateOne) ClearOwner() *MemoryUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the MemoryUpdate builder.
func (_u *MemoryUpdateOne) Where(ps ...predicate.Memory) *MemoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MemoryUpdateOne) Select(field string, fields ...string) *MemoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Memory entity.
func (_u *MemoryUpdateOne) Save(ctx context.Context) (*Memory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MemoryUpdateOne) SaveX(ctx context.Context) *Memory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MemoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MemoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MemoryUpdateOne) check() error {
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Memory.owner"`)
	}
	return nil
}

func (_u *MemoryUpdateOne) sqlSave(ctx context.Context) (_node *Memory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memory.Table, memory.Columns, sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Memory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memory.FieldID)
		for _, f := range fields {
			if !memory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(memory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(memory.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(memory.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Participants(); ok {
		_spec.SetField(memory.FieldParticipants, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedParticipants(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, memory.FieldParticipants, value)
		})
	}
	if value, ok := _u.mutation.Importance(); ok {
		_spec.SetField(memory.FieldImportance, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedImportance(); ok {
		_spec.AddField(memory.FieldImportance, field.TypeFloat64, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.OwnerTable,
			Columns: []string{memory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(npc.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memory.OwnerTable,
			Columns: []string{memory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(npc.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Memory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
