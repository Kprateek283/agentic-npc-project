// Code generated by ent, DO NOT EDIT.

package ent

import (
	"agentic-npc-backend/internal/db/ent/memory"
	"agentic-npc-backend/internal/db/ent/npc"
	"agentic-npc-backend/internal/db/ent/predicate"
	"agentic-npc-backend/internal/db/ent/schema"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// NPCUpdate is the builder for updating NPC entities.
type NPCUpdate struct {
	config
	hooks    []Hook
	mutation *NPCMutation
}

// Where appends a list predicates to the NPCUpdate builder.
func (_u *NPCUpdate) Where(ps ...predicate.NPC) *NPCUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *NPCUpdate) SetName(v string) *NPCUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NPCUpdate) SetNillableName(v *string) *NPCUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNpcType sets the "npc_type" field.
func (_u *NPCUpdate) SetNpcType(v string) *NPCUpdate {
	_u.mutation.SetNpcType(v)
	return _u
}

// SetNillableNpcType sets the "npc_type" field if the given value is not nil.
func (_u *NPCUpdate) SetNillableNpcType(v *string) *NPCUpdate {
	if v != nil {
		_u.SetNpcType(*v)
	}
	return _u
}

// SetEmotions sets the "emotions" field.
func (_u *NPCUpdate) SetEmotions(v *schema.EmotionState) *NPCUpdate {
	_u.mutation.SetEmotions(v)
	return _u
}

// SetCurrentGoals sets the "current_goals" field.
func (_u *NPCUpdate) SetCurrentGoals(v []string) *NPCUpdate {
	_u.mutation.SetCurrentGoals(v)
	return _u
}

// AppendCurrentGoals appends value to the "current_goals" field.
func (_u *NPCUpdate) AppendCurrentGoals(v []string) *NPCUpdate {
	_u.mutation.AppendCurrentGoals(v)
	return _u
}

// ClearCurrentGoals clears the value of the "current_goals" field.
func (_u *NPCUpdate) ClearCurrentGoals() *NPCUpdate {
	_u.mutation.ClearCurrentGoals()
	return _u
}

// AddMemoryIDs adds the "memories" edge to the Memory entity by IDs.
func (_u *NPCUpdate) AddMemoryIDs(ids ...int) *NPCUpdate {
	_u.mutation.AddMemoryIDs(ids...)
	return _u
}

// AddMemories adds the "memories" edges to the Memory entity.
func (_u *NPCUpdate) AddMemories(v ...*Memory) *NPCUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemoryIDs(ids...)
}

// Mutation returns the NPCMutation object of the builder.
func (_u *NPCUpdate) Mutation() *NPCMutation {
	return _u.mutation
}

// ClearMemories clears all "memories" edges to the Memory entity.
func (_u *NPCUpdate) ClearMemories() *NPCUpdate {
	_u.mutation.ClearMemories()
	return _u
}

// RemoveMemoryIDs removes the "memories" edge to Memory entities by IDs.
func (_u *NPCUpdate) RemoveMemoryIDs(ids ...int) *NPCUpdate {
	_u.mutation.RemoveMemoryIDs(ids...)
	return _u
}

// RemoveMemories removes "memories" edges to Memory entities.
func (_u *NPCUpdate) RemoveMemories(v ...*Memory) *NPCUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NPCUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NPCUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NPCUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NPCUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NPCUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := npc.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NPC.name": %w`, err)}
		}
	}
	return nil
}

func (_u *NPCUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(npc.Table, npc.Columns, sqlgraph.NewFieldSpec(npc.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(npc.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NpcType(); ok {
		_spec.SetField(npc.FieldNpcType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Emotions(); ok {
		_spec.SetField(npc.FieldEmotions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.CurrentGoals(); ok {
		_spec.SetField(npc.FieldCurrentGoals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCurrentGoals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, npc.FieldCurrentGoals, value)
		})
	}
	if _u.mutation.CurrentGoalsCleared() {
		_spec.ClearField(npc.FieldCurrentGoals, field.TypeJSON)
	}
	if _u.mutation.MemoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   npc.MemoriesTable,
			Columns: []string{npc.MemoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemoriesIDs(); len(nodes) > 0 && !_u.mutation.MemoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   npc.MemoriesTable,
			Columns: []string{npc.MemoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   npc.MemoriesTable,
			Columns: []string{npc.MemoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{npc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NPCUpdateOne is the builder for updating a single NPC entity.
type NPCUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NPCMutation
}

// SetName sets the "name" field.
func (_u *NPCUpdateOne) SetName(v string) *NPCUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NPCUpdateOne) SetNillableName(v *string) *NPCUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetNpcType sets the "npc_type" field.
func (_u *NPCUpdateOne) SetNpcType(v string) *NPCUpdateOne {
	_u.mutation.SetNpcType(v)
	return _u
}

// SetNillableNpcType sets the "npc_type" field if the given value is not nil.
func (_u *NPCUpdateOne) SetNillableNpcType(v *string) *NPCUpdateOne {
	if v != nil {
		_u.SetNpcType(*v)
	}
	return _u
}

// SetEmotions sets the "emotions" field.
func (_u *NPCUpdateOne) SetEmotions(v *schema.EmotionState) *NPCUpdateOne {
	_u.mutation.SetEmotions(v)
	return _u
}

// SetCurrentGoals sets the "current_goals" field.
func (_u *NPCUpdateOne) SetCurrentGoals(v []string) *NPCUpdateOne {
	_u.mutation.SetCurrentGoals(v)
	return _u
}

// AppendCurrentGoals appends value to the "current_goals" field.
func (_u *NPCUpdateOne) AppendCurrentGoals(v []string) *NPCUpdateOne {
	_u.mutation.AppendCurrentGoals(v)
	return _u
}

// ClearCurrentGoals clears the value of the "current_goals" field.
func (_u *NPCUpdateOne) ClearCurrentGoals() *NPCUpdateOne {
	_u.mutation.ClearCurrentGoals()
	return _u
}

// AddMemoryIDs adds the "memories" edge to the Memory entity by IDs.
func (_u *NPCUpdateOne) AddMemoryIDs(ids ...int) *NPCUpdateOne {
	_u.mutation.AddMemoryIDs(ids...)
	return _u
}

// AddMemories adds the "memories" edges to the Memory entity.
func (_u *NPCUpdateOne) AddMemories(v ...*Memory) *NPCUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemoryIDs(ids...)
}

// Mutation returns the NPCMutation object of the builder.
func (_u *NPCUpdateOne) Mutation() *NPCMutation {
	return _u.mutation
}

// ClearMemories clears all "memories" edges to the Memory entity.
func (_u *NPCUpdateOne) ClearMemories() *NPCUpdateOne {
	_u.mutation.ClearMemories()
	return _u
}

// RemoveMemoryIDs removes the "memories" edge to Memory entities by IDs.
func (_u *NPCUpdateOne) RemoveMemoryIDs(ids ...int) *NPCUpdateOne {
	_u.mutation.RemoveMemoryIDs(ids...)
	return _u
}

// RemoveMemories removes "memories" edges to Memory entities.
func (_u *NPCUpdateOne) RemoveMemories(v ...*Memory) *NPCUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemoryIDs(ids...)
}

// Where appends a list predicates to the NPCUpdate builder.
func (_u *NPCUpdateOne) Where(ps ...predicate.NPC) *NPCUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NPCUpdateOne) Select(field string, fields ...string) *NPCUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NPC entity.
func (_u *NPCUpdateOne) Save(ctx context.Context) (*NPC, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NPCUpdateOne) SaveX(ctx context.Context) *NPC {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NPCUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NPCUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NPCUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := npc.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NPC.name": %w`, err)}
		}
	}
	return nil
}

func (_u *NPCUpdateOne) sqlSave(ctx context.Context) (_node *NPC, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(npc.Table, npc.Columns, sqlgraph.NewFieldSpec(npc.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NPC.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, npc.FieldID)
		for _, f := range fields {
			if !npc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != npc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(npc.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.NpcType(); ok {
		_spec.SetField(npc.FieldNpcType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Emotions(); ok {
		_spec.SetField(npc.FieldEmotions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.CurrentGoals(); ok {
		_spec.SetField(npc.FieldCurrentGoals, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCurrentGoals(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, npc.FieldCurrentGoals, value)
		})
	}
	if _u.mutation.CurrentGoalsCleared() {
		_spec.ClearField(npc.FieldCurrentGoals, field.TypeJSON)
	}
	if _u.mutation.MemoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   npc.MemoriesTable,
			Columns: []string{npc.MemoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMemoriesIDs(); len(nodes) > 0 && !_u.mutation.MemoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   npc.MemoriesTable,
			Columns: []string{npc.MemoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MemoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   npc.MemoriesTable,
			Columns: []string{npc.MemoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NPC{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{npc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
