// Code generated by ent, DO NOT EDIT.

package memory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the memory type in the database.
	Label = "memory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldParticipants holds the string denoting the participants field in the database.
	FieldParticipants = "participants"
	// FieldImportance holds the string denoting the importance field in the database.
	FieldImportance = "importance"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the memory in the database.
	Table = "memories"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "memories"
	// OwnerInverseTable is the table name for the NPC entity.
	// It exists in this package in order to avoid circular dependency with the "npc" package.
	OwnerInverseTable = "np_cs"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "npc_memories"
)

// Columns holds all SQL columns for memory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDescription,
	FieldEventType,
	FieldParticipants,
	FieldImportance,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "memories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"npc_memories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultImportance holds the default value on creation for the "importance" field.
	DefaultImportance float64
)

// OrderOption defines the ordering options for the Memory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByImportance orders the results by the importance field.
func ByImportance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImportance, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
