// Code generated by ent, DO NOT EDIT.

package memory

import (
	"agentic-npc-backend/internal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Memory {
	return predicate.Memory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Memory {
	return predicate.Memory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Memory {
	return predicate.Memory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Memory {
	return predicate.Memory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Memory {
	return predicate.Memory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Memory {
	return predicate.Memory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Memory {
	return predicate.Memory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldCreatedAt, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldDescription, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldEventType, v))
}

// Importance applies equality check predicate on the "importance" field. It's identical to ImportanceEQ.
func Importance(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldImportance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Memory {
	return predicate.Memory(sql.FieldLTE(FieldCreatedAt, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Memory {
	return predicate.Memory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Memory {
	return predicate.Memory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Memory {
	return predicate.Memory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Memory {
	return predicate.Memory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Memory {
	return predicate.Memory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Memory {
	return predicate.Memory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Memory {
	return predicate.Memory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Memory {
	return predicate.Memory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Memory {
	return predicate.Memory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Memory {
	return predicate.Memory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Memory {
	return predicate.Memory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Memory {
	return predicate.Memory(sql.FieldContainsFold(FieldDescription, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.Memory {
	return predicate.Memory(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.Memory {
	return predicate.Memory(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.Memory {
	return predicate.Memory(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.Memory {
	return predicate.Memory(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.Memory {
	return predicate.Memory(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.Memory {
	return predicate.Memory(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.Memory {
	return predicate.Memory(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.Memory {
	return predicate.Memory(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.Memory {
	return predicate.Memory(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.Memory {
	return predicate.Memory(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.Memory {
	return predicate.Memory(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.Memory {
	return predicate.Memory(sql.FieldContainsFold(FieldEventType, v))
}

// ImportanceEQ applies the EQ predicate on the "importance" field.
func ImportanceEQ(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldEQ(FieldImportance, v))
}

// ImportanceNEQ applies the NEQ predicate on the "importance" field.
func ImportanceNEQ(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldNEQ(FieldImportance, v))
}

// ImportanceIn applies the In predicate on the "importance" field.
func ImportanceIn(vs ...float64) predicate.Memory {
	return predicate.Memory(sql.FieldIn(FieldImportance, vs...))
}

// ImportanceNotIn applies the NotIn predicate on the "importance" field.
func ImportanceNotIn(vs ...float64) predicate.Memory {
	return predicate.Memory(sql.FieldNotIn(FieldImportance, vs...))
}

// ImportanceGT applies the GT predicate on the "importance" field.
func ImportanceGT(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldGT(FieldImportance, v))
}

// ImportanceGTE applies the GTE predicate on the "importance" field.
func ImportanceGTE(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldGTE(FieldImportance, v))
}

// ImportanceLT applies the LT predicate on the "importance" field.
func ImportanceLT(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldLT(FieldImportance, v))
}

// ImportanceLTE applies the LTE predicate on the "importance" field.
func ImportanceLTE(v float64) predicate.Memory {
	return predicate.Memory(sql.FieldLTE(FieldImportance, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Memory {
	return predicate.Memory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.NPC) predicate.Memory {
	return predicate.Memory(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Memory) predicate.Memory {
	return predicate.Memory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Memory) predicate.Memory {
	return predicate.Memory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Memory) predicate.Memory {
	return predicate.Memory(sql.NotPredicates(p))
}
